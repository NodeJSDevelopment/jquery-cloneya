{"name":"Jquery-cloneya","tagline":"A jquery plugin to clone form elements","body":"# jQuery CloneYa\r\n\r\n\r\nCloneYa is a jQuery class useful for cloning DOM elements with their children. I wanted to be able to clone form inputs and groups of form inputs or fieldsets, or even whole forms. With time, I've hopefully made it very generic.\r\n\r\n\r\n## Usage\r\n\r\n\r\n```javascript\r\n\t\r\n\t$clonecontainer.cloneya({\r\n            limit\t\t: 999,\r\n            cloneThis\t\t: '.toclone',\r\n            valueClone\t\t: false,\r\n            dataClone\t\t: false,\r\n            deepClone\t\t: false,\r\n            cloneButton\t\t: '.clone',\r\n            deleteButton\t: '.delete',\r\n            clonePosition\t: 'after',\r\n            serializeID         : true\r\n        });\r\n```\r\n\r\n\r\n## Requirements\r\n\r\n\r\nCloneYa must be invoked on a wrapper with the clonable items as children. It automatically recognizes this markup, by default (except the *clone-wrapper*) :\r\n\r\n\r\n```html\r\n\t<div class=\"clone-wrapper\">\r\n\t\t<div class=\"toclone\">\r\n\t\t...\r\n\t\t\t<div class=\"clone\">+</div>\r\n\t\t\t<div class=\"delete\">-</div>\r\n\t\t</div>\t\r\n\t</div>\r\n```\r\n\r\n```javascript\r\n\t$('clone-wrapper').cloneya();\r\n```\r\n\r\n\r\nIt need not be div's as in the above example. It might, as well have been table &gt; tr, or a ul &gt; li arrangement. \r\n\r\n### External controllers (*new*)\r\n\r\nCloneya doesn't need the exact markup, as above. Inside, cloneya works via custom events triggered by the click events bound to the clone and delete buttons in the markup.\r\n\r\nIf the above markup is not found, or if you want an element outside the clonables to be able to trigger deletion and cloning, you can do so by binding the `clone_clone` and `clone_delete` events.\r\n\r\n## Options\r\n\r\n**option** *default*\r\n\r\n\r\n**limit** *999*\r\n\r\nThe maximum number of clones that should be generated\r\n\r\n\r\n**cloneThis** *'.toclone'*\r\n\r\nAny valid jQuery selector for the clonable elements\r\n\r\n\r\n**valueClone** *false*\r\n\r\nCopy the values of form inputs inside the clonable?\r\n\r\n\r\n**dataClone** *false*\r\n\r\nCopy the jQuery data with the clone element object?\r\n\r\n\r\n**deepClone** *false*\r\n\r\nCopy the events too, very deep copying?\r\n\r\n\r\n**cloneButton** *'.clone'*\r\n\r\nAny valid jQuery selector for the element that triggers cloning. Must be a child of the *cloneThis* selector\r\n\r\n\r\n**deleteButton** *'.delete'*\r\n\r\nAny valid jQuery selector for the element that triggers clone deletion. Must be a child of the *cloneThis* selector\r\n\r\n**clonePosition** *'after'*\r\n\r\nThe position the clone will be inserted.\r\n\r\nPossible values:\r\n\r\n*'before'* before the clonable\r\n*'after'* after the clonable\r\n*'start'* before the first clone (to do)\r\n*'end'* after the last clone (to do)\r\n\r\n**serializeID** *'true'*\r\n\r\nNumerically increment the ids of the inputs to maintain uniqueness\r\n\r\n## Events\r\n\r\n### Generic events\r\n\r\n```javascript\r\n\t$clonewrapper.on( 'clone_clone', function(e){\r\n\t\tconsole.log('yay! cloned again!');\r\n\t});\r\n```\r\n```javascript\r\n\t$my_custom_clone_trigger = $('.clone-that');\r\n\t$my_custom_clone_trigger.on( 'mouseenter', function(e){\r\n\t\t$clonewrapper.trigger('clone_clone');\r\n\t});\r\n```\r\n**clone_clone**\r\nThe clone event, triggered when the cloneButton is clicked. Useful for custom binding\r\n\r\n\r\n**clone_delete**\r\nThe delete event, triggered when the deleteButton is clicked. Useful for custom binding\r\n\r\n\r\n### Specific events\r\n\r\n*can be used as hooks*\r\n\r\n**event** *parameter1, parameter2, &hellip;*\r\n\r\n```javascript\r\n\t$clonewrapper.on( 'clone_after_append', function(e,newclone){\r\n\t\tconsole.log('a new clone was created:');\r\n\t\tconsole.log( newclone );\r\n\t});\r\n```\r\n\r\n\r\n**clone_before_clone** *$toclone*\r\n\r\nJust before an element is cloned\r\n\r\n\r\n**clone_form_input** *$form_input, $toclone, $newclone*\r\n\r\nWhen a form input of a new clone is being processed, after cloning. Useful for reindexing input name\r\n\r\n\r\n**clone_after_clone** *$toclone, $newclone*\r\n\r\nJust after the cloning is complete\r\n\r\n\r\n**clone_before_append** *$toclone, $newclone*\r\n\r\nJust before the new clone is appended to the DOM\r\n\r\n\r\n**clone_after_append** *$toclone, $newclone*\r\n\r\nJust after the new clone is appended to the DOM\r\n\r\n\r\n**clone_limit** *$limit_count, $toclone*\r\n\r\nWhen the maximum limit for cloning is reached\r\n\r\n\r\n**clone_before_delete** *$todelete*\r\n\r\nJust before a clone is deleted\r\n\r\n\r\n**clone_after_delete** *NULL*\r\n\r\nJust after the clone is deleted\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}